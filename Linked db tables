Linked db tables:


// users
- users // [DB: Created , API: Created, UI: Created]
- user_connections [Created] // [DB: Created , API:Created , UI: ]
- messages :id -> [int], fromUserId ->[userId], toUserId -> [userId], text -> [text], // [DB: Created , API:Created , UI: ]
    createdAt -> [timestamp], read -> [boolean] => [Created] // [DB: Created , API:Created , UI: ]
- connection_status [Created] && [Data inserted] // [DB: Created , API:Created , UI: ]

  // skills
- skills : id -> [int] ,name -> [text] // [DB: Created , API:Created , UI:Created ]
- user_skills : id -> [int],userId -> [userId], skillId -> [skillId] // [DB: Created , API:Created , UI:Created ]

  // education
- user_educations :id -> [int], userId -> [userId], school -> [text], degree -> [text], majorId -> [majorId],
  start -> [timestamp], end -> [timestamp] => [Created] // [DB: Created , API: , UI: ]
- majors : id -> [int], name -> [text] => [Created] // [DB: Created , API: , UI: ]

  // experience
- user_experiences : id -> [int], userId -> [userId], title -> [text], company -> [text] or companyId -> [companyId],
  startedAt -> [timestamp], endedAt -> [timestamp], description -> [text] // [DB: Created , API: , UI: ]

  // posts
- posts [Created] // [DB: Created , API:Created , UI:Created ]
- post_likes [Created] // [DB: Created , API:Created , UI:Created ]
- post_comments [Created] // [DB: Created , API:Created , UI:Created ]

  // companies
- companies :id -> [int], name -> [text], createdAt -> [timestamp],
  description -> [text], website -> [text], logo -> [text], location -> [text] // [DB: Created , API: , UI: ]
- company_managers : id -> [int], userId -> [userId], companyId -> [companyId] => [Created] // [DB: Created , API: , UI: ]

  // job posts
- job_posts : id -> [int], companyId -> [companyId], createdAt -> [timestamp], title -> [text], description -> [text],
  salary -> [text], remote -> [boolean], requirements -> [text], responsibilities -> [text],
  benefits -> [text], image -> [text] // [DB: Created , API: , UI: ]
- job_post_requirements : id -> [int], skillId -> [skillId], job_post_id -> [postId] // [DB: Created , API: , UI: ]
- job_post_applications : id -> [int], userId -> [userId], postId -> [postId], created -> [timestamp],
  status -> [statusId], resume -> [file] // [DB: Created , API: , UI: ]
- job_post_applications_statuses : id -> [int], name -> [text], uniqueKey -> [text] // [DB: Created , API: , UI: ]

Procedures:
- proc_send_connections_request @fromUserId int, @toUserId int:
   sending connection request from user to another user with status pending
- proc_accept_connection @connectionId int
   accepting connection request
- proc_remove_connection @connectionId int
    removing connection
- proc_get_user_connections @userId int
    getting user connections
- proc_get_user_connections_requests @userId int
    getting user connections requests
- proc_add_skill @userId int, @skillId int
    adding skill to user
- proc_remove_user_skills
    removing all user skills
- proc_get_user_skills
    getting user skills
- proc_get_last_message_by_user @userId INT,@FromUserId INT
    getting last message by user
- proc_get_by_user @userId INT,@fromUserId INT
    getting all messages by user
-  proc_mark_messages_as_read @fromUserId int, @toUserId int
    marking messages as read

Views;
- v_user_connections
 